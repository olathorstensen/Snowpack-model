#################### SC1 - Pinzer experiment ####################

# Plot of results:
# Plotly
# # BC
# fig = go.Figure()
# fig.add_trace(go.Scatter(x = y, y = bc, mode='lines', name='Surface bc'))
# fig.add_trace(go.Scatter(x = y, y = b_bc, mode='lines', name='Bottom bc'))

# fig.update_layout(
#     width = 900, height = 600, 
#     title='Temperature Boundary Conditions', xaxis_title='Hours', 
#     yaxis_title='Temperature [°C]', legend=dict(title='Legend'))
# fig.show()

# # Temp
# fig = go.Figure()
# for p in np.arange(0, ny+1, h*pisp):
#     fig.add_trace(go.Scatter(x=temp[:, p], y=x, mode='lines', name=f'Time {y_t[p]}'))

# fig.update_layout(
#     width = 900, height = 600,
#     title='Temperature', xaxis_title='Temperature [°C]', yaxis_title='Depth [cm]', 
#                   yaxis=dict(autorange='reversed'), legend=dict(font=dict(size=8)))
# fig.show()

# # Vapor pressure
# fig = go.Figure()
# for p in np.arange(0, ny+1, h*pisp):
#     fig.add_trace(go.Scatter(x=vp[:, p], y=x, mode='lines', name=f'Time {y_t[p]}'
#     ))

# fig.update_layout(
#     width = 900, height = 600, 
#     title='Vapor Pressure', xaxis_title='Vapor Pressure [mb]', yaxis_title='Depth [cm]',
#                   yaxis=dict(autorange='reversed'))
# fig.show()

# fig = go.Figure()
# fig.add_trace(go.Scatter(x = y, y = vp[0, :], mode='lines', name='Surface vp'))
# fig.add_trace(go.Scatter(x = y, y = vp[10, :], mode='lines', name='Bottom vp'))

# fig.update_layout(
#     width = 900, height = 600,
#     title='Vapor Pressure', xaxis_title='Time  [h]', 
#     yaxis_title='Vapor Pressure [mb]', legend=dict(title='Legend'))
# fig.show()

# # VPG
# fig = go.Figure()
# fig.add_trace(go.Scatter(x = y, y = vpg[0, :], mode='lines', name='Surface vpg'))
# fig.add_trace(go.Scatter(x = y, y = vpg[10, :], mode='lines', name='Bottom vpg'))

# fig.update_layout(
#     width = 900, height = 600,
#     title='Vapor Pressure Gradient', xaxis_title='Time  [h]', 
#     yaxis_title='Vapor Pressure Gradient [Pa/cm]', legend=dict(title='Legend'))
# fig.show()

# # Growth rate
# fig = go.Figure()
# fig.add_trace(go.Scatter(x = y, y = fgr[0, :], mode='lines', name='Surface fgr'))
# fig.add_trace(go.Scatter(x = y, y = fgr[9, :], mode='lines', name='Bottom fgr'))

# fig.update_layout(
#     width = 900, height = 600,
#     title='Facet Growth Rate', xaxis_title='Time  [h]', 
#     yaxis_title='Facet growth rate [nm/s]', legend=dict(title='Legend'))
# fig.show()

# Growth
# fig = go.Figure()
# fig.add_trace(go.Scatter(x = y, y = fg[0, :], mode='lines', name='Surface fg'))
# fig.add_trace(go.Scatter(x = y, y = fg[10, :], mode='lines', name='Bottom fg'))

# fig.update_layout(
#     width = 900, height = 600,
#     title='Facet Growth', xaxis_title='Time  [h]', 
#     yaxis_title='Facet growth [mm]', legend=dict(title='Legend'))
# fig.show()

# # Net facet growth
# fig = go.Figure()
# fig.add_trace(go.Scatter(x = net_growth[0:9], y = x, mode='lines', name='Net Growth'))

# fig.update_layout(
#     width = 900,
#     height = 600,
#     title='Net Facet Growth',
#     xaxis_title='Net Growth [mm]',
#     yaxis_title='Depth [cm]',
#     yaxis=dict(autorange='reversed'))
# fig.show()

# ############## Matplotlib
# # BC
# plt.figure(figsize=(9, 6))
# plt.plot(y, bc, label='Surface bc')
# plt.plot(y, b_bc, label='Bottom bc')
# plt.title('Temperature Boundary Conditions')
# plt.xlabel('Hours')
# plt.ylabel('Temperature [°C]')
# plt.legend(title='Legend')
# plt.grid(True, alpha=0.5)
# plt.show()

# # Temp
# plt.figure(figsize=(9, 6))
# for p in np.arange(0, ny+1, h*pisp):
#     plt.plot(temp[:, p], x, label=f'Time {y_t[p]}')
# plt.title('Temperature')
# plt.xlabel('Temperature [°C]')
# plt.ylabel('Depth [cm]')
# plt.gca().invert_yaxis()
# plt.legend(fontsize=8)
# plt.grid(True, alpha=0.5)
# plt.show()

# # Vapor pressure
# plt.figure(figsize=(9, 6))
# for p in np.arange(0, ny+1, h*pisp):
#     plt.plot(vp[:, p], x, label=f'Time {y_t[p]}')
# plt.title('Vapor Pressure')
# plt.xlabel('Vapor Pressure [mb]')
# plt.ylabel('Depth [cm]')
# plt.gca().invert_yaxis()
# plt.grid(True, alpha=0.5)
# plt.legend()
# plt.show()

# plt.figure(figsize=(9, 6))
# plt.plot(y, vp[0, :], label='Surface vp')
# plt.plot(y, vp[-1, :], label='Bottom vp')
# plt.title('Vapor Pressure')
# plt.xlabel('Time [h]')
# plt.ylabel('Vapor Pressure [mb]')
# plt.legend()
# plt.grid(True, alpha=0.5)
# plt.show()

# # VPG
# plt.figure(figsize=(9, 6))
# plt.plot(y, vpg[0, :], label='Surface vpg')
# plt.plot(y, vpg[-1, :], label='Bottom vpg')
# plt.title('Vapor Pressure Gradient')
# plt.xlabel('Time [h]')
# plt.ylabel('Vapor Pressure Gradient [Pa/cm]')
# plt.legend(title='Legend')
# plt.grid(True, alpha=0.5)
# plt.show()

# # Growth rate
# plt.figure(figsize=(9, 6))
# plt.plot(y, fgr[0, :], label='Surface fgr')
# plt.plot(y, fgr[-1, :], label='Bottom fgr')
# plt.title('Facet Growth Rate')
# plt.xlabel('Time [h]')
# plt.ylabel('Facet Growth Rate [nm/s]')
# plt.legend(title='Legend')
# plt.grid(True, alpha=0.5)
# plt.show()

# # Growth 
# plt.figure(figsize=(9, 6))
# plt.plot(y, fg[0, :], label='Surface fg')
# plt.plot(y, fg[-1, :], label='Bottom fg')
# plt.title('Facet Growth')
# plt.xlabel('Time [h]')
# plt.ylabel('Facet Growth [mm]')
# plt.legend(title='Legend')
# plt.grid(True, alpha=0.5)
# plt.show()

# # Net growth
# plt.figure(figsize=(9, 6))
# plt.plot(net_growth, x[0:-1], label='Net Growth')
# plt.title('Net Facet Growth')
# plt.xlabel('Net Growth [mm]')
# plt.ylabel('Depth [cm]')
# plt.gca().invert_yaxis()  # Reverse the y-axis for depth
# plt.grid(True, alpha=0.5)
# plt.show()
################################################################



#################### SC3  ####################
#%%

# Alternate figures for Scenario 3. Fig 5A1.
pld = int(plot_depth/dx)+1
fig, ax = plt.subplots(1, 3, figsize=(18, 6), gridspec_kw={'width_ratios': [2, 1, 1], 'wspace': 0.1})

# Temperature plot
cmap = plt.get_cmap("turbo_r")
colors = [cmap(i / 12) for i in range(12)]
colors = colors[-5:] + colors [:-5]


for i, p in enumerate(np.arange(0, h*24, h*pisp)):
    time_only = (base_time + timedelta(seconds=y_sec[p])).strftime("%H:%M")
    ax[0].plot(temp_plot_SC3[:pld, p], x[:pld], label=time_only, color=colors[i], lw=2.7)

ax[0].set_xlabel('Temperature [°C]')
#ax[0].set_ylabel('Depth [cm]')
ax[0].yaxis.tick_right()
ax[0].yaxis.set_label_position("right")
ax[0].set_ylabel('Depth [cm]', rotation=270, labelpad=25)
ax[0].invert_yaxis()
ax[0].legend()
ax[0].grid(alpha=0.5)
ax[0].set_xticks(np.arange(0,-22,-2))
ax[0].xaxis.set_label_position('top')
ax[0].xaxis.tick_top()
ax[0].text(0.958, 0.05, "a",  
           transform=ax[0].transAxes,
           verticalalignment='top', 
           horizontalalignment='left', 
           bbox=dict(facecolor='white', edgecolor='black', boxstyle='square,pad=0.3'))

# Mean DTVPGE near surface
linestyle = ['dotted', '-', '--', '-.', '-', '-' ]
colors = ['C3', 'black', 'darkgrey', 'darkgrey','C1', 'C9' ]
linewidth = [4,4.2,2.7 ,2.7 ,2.7 ,2.7 ,2.7]
for i, column in enumerate(ng_hub.columns):
    ax[1].plot(ng_hub[column][:pld], x_stag[:pld], label=column, linestyle=linestyle[i], color=colors[i], lw=linewidth[i])
  
ax[1].legend()
ax[1].set_xlabel("Mean DTVPGE [Pa/cm]")
# ax[1].set_xticks(np.arange(-0.2, 0.06, 0.05))
ax[1].set_yticklabels([])
ax[1].invert_yaxis()
ax[1].grid(alpha=0.5)
ax[1].xaxis.set_label_position('top')
ax[1].xaxis.tick_top()
ax[1].text(0.915, 0.05, "b",  
           transform=ax[1].transAxes,
           verticalalignment='top', 
           horizontalalignment='left', 
           bbox=dict(facecolor='white', edgecolor='black', boxstyle='square,pad=0.3'))

ax[2].plot(ng_hub['K = 50'][28:pld], x_stag[28:pld], color = 'black', lw = 2.7, label = 'K = 50 $m^{-1}$')
ax[2].set_xlabel("Zoomed in DTVPGE [Pa/cm]")
ax[2].set_xticks(np.arange(-0.2, 0.8, 0.2))
ax[2].legend(loc='lower right', bbox_to_anchor=(1, 0.05))
# ax[2].set_yticklabels()
ax[2].yaxis.tick_right() 
ax[2].yaxis.set_label_position("right")
ax[2].invert_yaxis()
ax[2].grid(alpha=0.5)
ax[2].xaxis.set_label_position('top')
ax[2].xaxis.tick_top()
ax[2].text(0.915, 0.05, "c",  
           transform=ax[2].transAxes,
           verticalalignment='top', 
           horizontalalignment='left', 
           bbox=dict(facecolor='white', edgecolor='black', boxstyle='square,pad=0.3'))
#%%

# Alternate figures for Scenario 3. Fig 5A2.
pld = int(plot_depth/dx)+1
fig, ax = plt.subplots(1, 3, figsize=(18, 6), gridspec_kw={'width_ratios': [1, 1, 1], 'wspace': 0.1})

# Temperature plot
cmap = plt.get_cmap("turbo_r")
colors = [cmap(i / 12) for i in range(12)]
colors = colors[-5:] + colors [:-5]


ax[0].plot(ng_hub['K = 50'][:pld], x_stag[:pld], color = 'black', lw = 2.7, label = 'K = 50 $m^{-1}$')
ax[0].set_xlabel("Mean DTVPGE [Pa/cm] top 40 cm")
ax[0].set_yticks(np.arange(0, 45, 5))
ax[0].legend(loc='lower right', bbox_to_anchor=(1, 0.05))
# ax[2].set_yticklabels()
ax[0].yaxis.tick_right() 
ax[0].yaxis.set_label_position("right")
ax[0].invert_yaxis()
ax[0].grid(alpha=0.5)
ax[0].xaxis.set_label_position('top')
ax[0].xaxis.tick_top()
ax[0].text(0.958, 0.05, "a",  
           transform=ax[0].transAxes,
           verticalalignment='top', 
           horizontalalignment='left', 
           bbox=dict(facecolor='white', edgecolor='black', boxstyle='square,pad=0.3'))

# Mean DTVPGE near surface
ax[1].plot(ng_hub['K = 50'][10:pld], x_stag[10:pld], color = 'black', lw = 2.7, label = 'K = 50 $m^{-1}$')
ax[1].set_xlabel("Mean DTVPGE [Pa/cm] 5 - 40 cm")
ax[1].set_yticks(np.arange(0, 45, 5))
ax[1].legend(loc='lower right', bbox_to_anchor=(1, 0.05))
ax[1].yaxis.tick_right() 
ax[1].yaxis.set_label_position("right")
ax[1].invert_yaxis()
ax[1].grid(alpha=0.5)
ax[1].xaxis.set_label_position('top')
ax[1].xaxis.tick_top()
ax[1].text(0.915, 0.05, "b",  
           transform=ax[1].transAxes,
           verticalalignment='top', 
           horizontalalignment='left', 
           bbox=dict(facecolor='white', edgecolor='black', boxstyle='square,pad=0.3'))

ax[2].plot(ng_hub['K = 50'][28:pld], x_stag[28:pld], color = 'black', lw = 2.7, label = 'K = 50 $m^{-1}$')
ax[2].set_xlabel("Mean DTVPGE [Pa/cm] 14 - 40 cm")
ax[2].set_xticks(np.arange(-0.2, 0.8, 0.2))
ax[2].set_yticks(np.arange(0, 45, 5))
ax[2].legend(loc='lower right', bbox_to_anchor=(1, 0.05))
ax[2].yaxis.tick_right() 
ax[2].yaxis.set_label_position("right")
ax[2].invert_yaxis()
ax[2].grid(alpha=0.5)
ax[2].xaxis.set_label_position('top')
ax[2].xaxis.tick_top()
ax[2].text(0.915, 0.05, "c",  
           transform=ax[2].transAxes,
           verticalalignment='top', 
           horizontalalignment='left', 
           bbox=dict(facecolor='white', edgecolor='black', boxstyle='square,pad=0.3'))
#%%

# Alternate figures for Scenario 3. Fig 5A3.
pld = int(plot_depth/dx)+1
fig, ax = plt.subplots(1, 2, figsize=(12, 6), gridspec_kw={'width_ratios': [2, 1], 'wspace': 0.1})

# Temperature plot
cmap = plt.get_cmap("turbo_r")  # Alternatives: "viridis", "plasma", "tab10", "tab20", "Set3"
colors = [cmap(i / 12) for i in range(12)]
colors = colors[-5:] + colors [:-5]


for i, p in enumerate(np.arange(0, h*24, h*pisp)):
    time_only = (base_time + timedelta(seconds=y_sec[p])).strftime("%H:%M")
    ax[0].plot(temp_plot_SC3[:pld, p], x[:pld], label=time_only, color=colors[i], lw=2.7)

ax[0].set_xlabel('Temperature [°C]')
#ax[0].set_ylabel('Depth [cm]')
ax[0].yaxis.tick_right() 
ax[0].yaxis.set_label_position("right")  
ax[0].set_ylabel('Depth [cm]', rotation=270, labelpad=25)
ax[0].invert_yaxis()
ax[0].legend()
ax[0].grid(alpha=0.5)
ax[0].set_xticks(np.arange(0,-22,-2))
ax[0].xaxis.set_label_position('top')
ax[0].xaxis.tick_top()
ax[0].text(0.968, 0.05, "a",  
           transform=ax[0].transAxes,
           verticalalignment='top', 
           horizontalalignment='left', 
           bbox=dict(facecolor='white', edgecolor='black', boxstyle='square,pad=0.3'))

# Mean DTVPGE near surface
linestyle = ['dotted', '-', '--', '-.', '-', '-' ]
colors = ['C3', 'black', 'darkgrey', 'darkgrey','C1', 'C9' ]
linewidth = [4,4.2,2.7 ,2.7 ,2.7 ,2.7 ,2.7]
for i, column in enumerate(ng_hub.columns):
    ax[1].plot(ng_hub[column][:pld], x_stag[:pld], label=column, linestyle=linestyle[i], color=colors[i], lw=linewidth[i])
ax[1].plot(dtvpge_abs_mean[:pld], x_stag[:pld], label = 'DTVPGE abs mean', linestyle = 'dotted', color = 'black', lw = 4)  
ax[1].legend(loc='lower left')
ax[1].set_xlabel("Mean DTVPGE [Pa/cm]")
ax[1].set_yticklabels([])
ax[1].invert_yaxis()
ax[1].grid(alpha=0.5)
ax[1].xaxis.set_label_position('top')
ax[1].xaxis.tick_top()
ax[1].text(0.93, 0.05, "b",  
           transform=ax[1].transAxes,
           verticalalignment='top', 
           horizontalalignment='left', 
           bbox=dict(facecolor='white', edgecolor='black', boxstyle='square,pad=0.3'))
#%%

# Alternate figures for Scenario 3. Fig 5A4.
pld = int(plot_depth/dx)+1
fig, ax = plt.subplots(1, 2, figsize=(12, 6), gridspec_kw={'width_ratios': [2, 1], 'wspace': 0.1})

# Temperature plot
cmap = plt.get_cmap("turbo_r")  # Alternatives: "viridis", "plasma", "tab10", "tab20", "Set3"
colors = [cmap(i / 12) for i in range(12)]
colors = colors[-5:] + colors [:-5]


for i, p in enumerate(np.arange(0, h*24, h*pisp)):
    time_only = (base_time + timedelta(seconds=y_sec[p])).strftime("%H:%M")
    ax[0].plot(temp_plot_SC3[:pld, p], x[:pld], label=time_only, color=colors[i], lw=2.7)

ax[0].set_xlabel('Temperature [°C]')
ax[0].yaxis.tick_right() 
ax[0].yaxis.set_label_position("right")  
ax[0].set_ylabel('Depth [cm]', rotation=270, labelpad=25)
ax[0].invert_yaxis()
ax[0].legend()
ax[0].grid(alpha=0.5)
ax[0].set_xticks(np.arange(0,-22,-2))
ax[0].xaxis.set_label_position('top')
ax[0].xaxis.tick_top()
ax[0].text(0.968, 0.05, "a",  
           transform=ax[0].transAxes,
           verticalalignment='top', 
           horizontalalignment='left', 
           bbox=dict(facecolor='white', edgecolor='black', boxstyle='square,pad=0.3'))

# Mean DTVPGE near surface
linestyle = ['dotted', '-', '--', '-.', '-', '-' ]
colors = ['C3', 'black', 'darkgrey', 'darkgrey','C1', 'C9' ]
linewidth = [4,4.2,2.7 ,2.7 ,2.7 ,2.7 ,2.7]
for i, column in enumerate(ng_hub.columns):
    ax[1].plot(ng_hub[column][:pld], x_stag[:pld], label=column, linestyle=linestyle[i], color=colors[i], lw=linewidth[i])
ax[1].plot(-1 * dtvpge_abs_mean[:pld], x_stag[:pld], label = 'DTVPGE abs mean', linestyle = 'dotted', color = 'black', lw = 4)  
ax[1].legend(loc='lower left')
ax[1].set_xlabel("Mean DTVPGE [Pa/cm]")
ax[1].set_yticklabels([])
ax[1].invert_yaxis()
ax[1].grid(alpha=0.5)
ax[1].xaxis.set_label_position('top')
ax[1].xaxis.tick_top()
ax[1].text(0.93, 0.05, "b",  
           transform=ax[1].transAxes,
           verticalalignment='top', 
           horizontalalignment='left', 
           bbox=dict(facecolor='white', edgecolor='black', boxstyle='square,pad=0.3'))

#%%

# Alternate figures for Scenario 3. Fig 5A5. c plot with zoomed in dtvpge
plt.rcParams.update({'font.size': 16}) # FIX THIS HAS TO CHANGE
# pld = int(plot_depth/dx)+1
fig, ax = plt.subplots(1, 3, figsize=(18, 6), gridspec_kw={'width_ratios': [3, 1.5, 1], 'wspace': 0.1})

# Temperature plot
cmap = plt.get_cmap("turbo_r")
colors = [cmap(i / 12) for i in range(12)]
colors = colors[-5:] + colors [:-5]


for i, p in enumerate(np.arange(0, h*24, h*pisp)):
    time_only = (base_time + timedelta(seconds=y_sec[p])).strftime("%H:%M")
    ax[0].plot(temp_plot_SC3[:pld, p], x[:pld], label=time_only, color=colors[i], lw=2.7)

ax[0].set_xlabel('Temperature [°C]')
ax[0].yaxis.tick_left()
ax[0].set_ylabel('Depth [cm]')
ax[0].yaxis.set_label_position("left")
# ax[0].set_ylabel('Depth [cm]', rotation=270, labelpad=25)
ax[0].invert_yaxis()
ax[0].legend()
ax[0].grid(alpha=0.5)
ax[0].set_xticks(np.arange(0,-22,-2))
ax[0].xaxis.set_label_position('top')
ax[0].xaxis.tick_top()
ax[0].text(0.958, 0.05, "a",  
           transform=ax[0].transAxes,
           verticalalignment='top', 
           horizontalalignment='left', 
           bbox=dict(facecolor='white', edgecolor='black', boxstyle='square,pad=0.3'))

# Mean DTVPGE near surface
linestyle = ['dotted', '-', '--', '-.', '-', '-' ]
colors = ['C3', 'black', 'darkgrey', 'darkgrey','C1', 'C9' ]
linewidth = [4,4.2,2.7 ,2.7 ,2.7 ,2.7 ,2.7]
for i, column in enumerate(ng_hub.columns):
    ax[1].plot(ng_hub[column][:pld], x_stag[:pld], label=column, linestyle=linestyle[i], color=colors[i], lw=linewidth[i])
  
ax[1].legend()
ax[1].set_xlabel("Mean DTVPGE [Pa/cm]")
# ax[1].set_xticks(np.arange(-0.2, 0.06, 0.05))
ax[1].invert_yaxis()
ax[1].grid(alpha=0.5)
ax[1].xaxis.set_label_position('top')
ax[1].xaxis.tick_top()
ax[1].text(0.915, 0.05, "b",  
           transform=ax[1].transAxes,
           verticalalignment='top', 
           horizontalalignment='left', 
           bbox=dict(facecolor='white', edgecolor='black', boxstyle='square,pad=0.3'))

ax[2].plot(ng_hub['K = 50 $m^{-1}$'][0:pld], x_stag[:pld], color = 'black', lw = 2.7, label = 'K = 50 $m^{-1}$')
ax[2].set_xlabel("Mean DTVPGE [Pa/cm]")
# ax[2].set_xticks(np.arange(-0.2, 0.8, 0.2))
ax[2].set_xlim(-5, 2.5)
ax[2].legend(loc='lower left')
ax[2].yaxis.tick_right() 
ax[2].set_ylabel('Depth [cm]')
ax[2].yaxis.set_label_position("right")
ax[2].invert_yaxis()
ax[2].grid(alpha=0.5)
ax[2].xaxis.set_label_position('top')
ax[2].xaxis.tick_top()
ax[2].text(0.915, 0.05, "c",  
           transform=ax[2].transAxes,
           verticalalignment='top', 
           horizontalalignment='left', 
           bbox=dict(facecolor='white', edgecolor='black', boxstyle='square,pad=0.3'))
